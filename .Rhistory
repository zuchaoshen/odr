power$out
myod.balanced <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0, r22 = 0, r32 = 0, icc2 = 0.107, icc3 = 0.035,
omega = 0.01, p = 0.5)
power <- power.3m(expr = myod.balanced , m = 308220, d = 0.2, q = 0)
power$out
# 2.1. unconstrained OD without covariate
myod <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0, r22 = 0, r32 = 0, icc2 = 0.107, icc3 = 0.035,
omega = 0.01)
n <- round(myod$out$n,3)
J <- round(myod$out$J,3)
p <- round(myod$out$p,3)
power <- power.3m(expr = myod, power = 0.8, d = 0.2, q = 0,
constraint = list(n =  12, J = 26, p = 0.25))
power$out
# 2.1. unconstrained OD without covariate
myod <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0, r22 = 0, r32 = 0, icc2 = 0.107, icc3 = 0.035,
omega = 0.01)
n <- round(myod$out$n,3)
J <- round(myod$out$J,3)
p <- round(myod$out$p,3)
power <- power.3m(expr = myod, power = 0.8, d = 0.2, q = 0)
power$out
# 2.1. unconstrained OD without covariate
myod <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0, r22 = 0, r32 = 0, icc2 = 0.107, icc3 = 0.035,
omega = 0.01)
n <- round(myod$out$n,3)
J <- round(myod$out$J,3)
p <- round(myod$out$p,3)
myod.balanced <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0, r22 = 0, r32 = 0, icc2 = 0.107, icc3 = 0.035,
omega = 0.01, p = 0.5)
power <- power.3m(expr = myod.balanced , m = 308220, d = 0.2, q = 0)
power$out
# 2.1. unconstrained OD without covariate
myod <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0, r22 = 0, r32 = 0, icc2 = 0.107, icc3 = 0.035,
omega = 0.01)
n <- round(myod$out$n,3)
J <- round(myod$out$J,3)
p <- round(myod$out$p,3)
power <- power.3m(expr = myod, power = 0.8, d = 0.2, q = 0,
constraint = list(n =  12, J = 26, p = 0.25))
power$out
# 2.1. unconstrained OD without covariate
myod <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0, r22 = 0, r32 = 0, icc2 = 0.107, icc3 = 0.035,
omega = 0.01)
# 2.1. unconstrained OD without covariate
myod <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0, r22 = 0, r32 = 0, icc2 = 0.107, icc3 = 0.035,
omega = 0.01)
n <- round(myod$out$n,3); n
J <- round(myod$out$J,3); J # J =
p <- round(myod$out$p,3); p # p =
power <- power.3m(expr = myod, power = 0.8, d = 0.2, q = 0,
constraint = list(n =  25.660, J = 11.811, p = 0.249))
power$out
# 2.1. unconstrained OD without covariate
myod <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0, r22 = 0, r32 = 0, icc2 = 0.107, icc3 = 0.035,
omega = 0.01)
n <- round(myod$out$n,3); n # n = 25.660
J <- round(myod$out$J,3); J # J = 11.811
p <- round(myod$out$p,3); p # p = 0.249
power <- power.3m(expr = myod, power = 0.8, d = 0.2, q = 0,
constraint = list(n =  25.660, J = 11.811, p = 0.249))
power$out # m = 242667; K = 16.463
myod.balanced <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0, r22 = 0, r32 = 0, icc2 = 0.107, icc3 = 0.035,
omega = 0.01, p = 0.5)
power <- power.3m(expr = myod.balanced , m = 242667, d = 0.2, q = 0,
constraint = list(n =  35.255, J = 7.431, p = 0.5))
power$out
myod.balanced <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0, r22 = 0, r32 = 0, icc2 = 0.107, icc3 = 0.035,
omega = 0.01, p = 0.5)
power <- power.3m(expr = myod.balanced , m = 242667, d = 0.2, q = 0,
constraint = list(n =  35.255, J = 7.431, p = 0.5))
power$out # power = 0.719
myod.balanced <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0, r22 = 0, r32 = 0, icc2 = 0.107, icc3 = 0.035,
omega = 0.01, p = 0.5)
n <- round(myod.balanced$out$n,3); n # n = 25.660
n <- round(myod.balanced$out$n,3); n # n = 35.255
J <- round(myod.balanced$out$J,3); J # J = 11.811
J <- round(myod.balanced$out$J,3); J # J = 7.431
p <- round(myod.balanced$out$p,3); p # p = 0.5
power <- power.3m(expr = myod.balanced , m = 242667, d = 0.2, q = 0,
constraint = list(n =  35.255, J = 7.431, p = 0.5))
power$out # power = 0.719
power <- power.3m(expr = myod.balanced , power = 0.8, d = 0.2, q = 0,
constraint = list(n =  35.255, J = 7.431, p = 0.5))
power$out # power = 0.719
power <- power.3m(expr = myod.balanced , m = 242667, d = 0.2, q = 0,
constraint = list(n =  35.255, J = 7.431, p = 0.5))
power$out # power = 0.719
power <- power.3m(expr = myod.balanced , power = 0.8, d = 0.2, q = 0,
constraint = list(n =  35.255, J = 7.431, p = 0.5))
power$out # m = 288063
288063/242667
myod <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0.613, r22 = 0.609, r32m = 0.3, icc2 = 0.107, icc3 = 0.035,
omega = 0.01)
n <- round(myod$out$n,3); n # n = 25.660
J <- round(myod$out$J,3); J # J = 11.811
p <- round(myod$out$p,3); p # p = 0.249
myod <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0.613, r22 = 0.609, r32m = 0.3, icc2 = 0.107, icc3 = 0.035,
omega = 0.01)
n <- round(myod$out$n,3); n # n = 25.51
J <- round(myod$out$J,3); J # J = 8.838
p <- round(myod$out$p,3); p # p = 0.248
myod <- od.3(c1 = 10, c2 = 100, c3 = 200, c1t = 10, c2t = 100,
c3t = 10000,
r12 = 0.613, r22 = 0.609, r32 = 0.727, icc2 = 0.107, icc3 = 0.035)
power <- power.3(expr = myod, power = 0.8, d = 0.2, q = 1,
constraint = list(n = 25.51, J = 8.838, p = 0.248))
power$out
power <- power.3(expr = myod, power = 0.8, d = 0.2, q = 1,
constraint = list(n = 25.51, J = 8.838, p = 0.248))
power$out # m  = 108711; K = 18.845
1-108711/242667
# saved
(1-108711/242667)*100
##
setwd("D:\\Dropbox\\1Publication\\2020 OD MRT3L (JREE)")
library(ggplot2)
#install.packages(odr) # only need it for first time
library(odr)
# 2.1. unconstrained OD without covariate
myod <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0, r22 = 0, r32 = 0, icc2 = 0.107, icc3 = 0.035,
omega = 0.01)
n <- round(myod$out$n,3); n # n = 25.660
J <- round(myod$out$J,3); J # J = 11.811
p <- round(myod$out$p,3); p # p = 0.249
power <- power.3m(expr = myod, power = 0.8, d = 0.2, q = 0,
constraint = list(n =  25.660, J = 11.811, p = 0.249))
power$out # m = 242667; K = 16.463
# 2.2. OD in conventional framework without covariates
myod.balanced <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0, r22 = 0, r32 = 0, icc2 = 0.107, icc3 = 0.035,
omega = 0.01, p = 0.5)
n <- round(myod.balanced$out$n,3); n # n = 35.255
J <- round(myod.balanced$out$J,3); J # J = 7.431
p <- round(myod.balanced$out$p,3); p # p = 0.5
power <- power.3m(expr = myod.balanced , m = 242667, d = 0.2, q = 0,
constraint = list(n =  35.255, J = 7.431, p = 0.5))
power$out # power = 0.719
power <- power.3m(expr = myod.balanced , power = 0.8, d = 0.2, q = 0,
constraint = list(n =  35.255, J = 7.431, p = 0.5))
power$out # m = 288063
288063/242667
myod <- od.3m(c1 = 10, c2 = 100, c1t = 10, c2t = 3000,
c3 = 2000,
r12 = 0.613, r22 = 0.609, r32m = 0.3, icc2 = 0.107, icc3 = 0.035,
omega = 0.01)
n <- round(myod$out$n,3); n # n = 25.51
setwd("D:\\Dropbox\\Sensitivity Analysis for SEM\\Charlie-Hailey-William-Zeyuan\\William\\For grant proposal")
#lower diagonal correlation matrix provided by the authors
lower = '
1.00
.40 1.00
.40 .64 1.00
.41 .66 .61 1.00
.42 .52 .53 .61 1.00
.34 .50 .46 .53 .48 1.00
.42 .47 .41 .43 .47 .55 1.00
.39 .46 .39 .30 .21 .30 .37 1.00
.24 .31 .30 .31 .26 .32 .27 .56 1.00
.33 .35 .35 .40 .31 .25 .35 .51 .42 1.00
.30 .42 .36 .32 .24 .37 .43 .44 .37 .49 1.00'
library(lavaan)
library(SEMsens)
?sem
#convert to full covariance matrix
sample.cov = getCov(lower, sds = c(5.64,14.68,6.57,6.07,3.39,10.16,6.11,4.91,15.59,0.96,0.99),
names = c("Working_memory",
"Vocabulary",
"Grammar",
"Inference",
"ToM",
"TNL",
"Expository",
"Spelling",
"Sentence_copying",
"One_day",
"Castle"))
model <-'Vocabulary~Working_memory
Grammar~Working_memory
Inference~Vocabulary+Grammar+Working_memory
ToM~Vocabulary+Grammar+Working_memory
Spelling~Working_memory
Sentence_copying~Working_memory
Discourse~Inference+ToM+Vocabulary+Grammar+Working_memory
Writing~Spelling+Sentence_copying+Discourse
Discourse=~TNL+Expository
Writing=~One_day+Castle
Vocabulary~~Grammar
Grammar~~Sentence_copying
Vocabulary~~Sentence_copying
Grammar~~Spelling
Vocabulary~~Spelling
Inference~~ToM
Discourse~~Sentence_copying
Discourse~~Spelling
Spelling~~Sentence_copying'
sens.model <- 'Vocabulary~Working_memory
Grammar~Working_memory
Inference~Vocabulary+Grammar+Working_memory
ToM~Vocabulary+Grammar+Working_memory
Spelling~Working_memory
Sentence_copying~Working_memory
Discourse~Inference+ToM+Vocabulary+Grammar+Working_memory
Writing~Spelling+Sentence_copying+Discourse
Discourse=~TNL+Expository
Writing=~One_day+Castle
Vocabulary~~Grammar
Grammar~~Sentence_copying
Vocabulary~~Sentence_copying
Grammar~~Spelling
Vocabulary~~Spelling
Inference~~ToM
Discourse~~Sentence_copying
Discourse~~Spelling
Spelling~~Sentence_copying
Working_memory ~ phantom1*phantom
Grammar ~ phantom2*phantom
Vocabulary ~ phantom3*phantom
ToM ~ phantom4*phantom
Inference ~ phantom5*phantom
Spelling ~ phantom6*phantom
Sentence_copying  ~ phantom7*phantom
Discourse ~ phantom8*phantom
Writing ~ phantom9*phantom
phantom =~ 0 # added for mean of zero
phantom ~~ 1*phantom'
# if opt.fun==6, we optimize how close RMSEA is to 0.05
# y <-  1/abs(unname(lavaan::fitmeasures(new.out)["rmsea"]) - 0.05)
start <- Sys.time()
my.sa <-sa.aco(model = model, sens.model = sens.model, sample.cov = sample.cov,
sample.nobs = 193, n.of.sens.pars = 9, max.value= 2000,
opt.fun = 6, ## to just significant
paths = c(1:18),
seed = 100
)
run.time <- Sys.time() - start; run.time
my.sa$out
table <- sens.tables(my.sa)
results <- table$sens.summary
write.csv(results, "rmsea.fun.6sens.summary.all.paths.csv")
results <- table$phan.paths
write.csv(results, "rmsea.fun.6phan.paths.all.paths.csv")
results <- table$phan.min
write.csv(results, "rmsea.fun.6phan.min.all.paths.csv")
results <- table$phan.max
write.csv(results, "rmsea.fun.6phan.max.all.paths.csv")
results <- table$p.paths
write.csv(results, "rmsea.fun.6p.paths.all.paths.csv")
my.sa$out
table <- sens.tables(my.sa)
results <- table$sens.summary
write.csv(results, "rmsea.fun.6sens.summary.all.paths.csv")
results <- table$phan.paths
write.csv(results, "rmsea.fun.6phan.paths.all.paths.csv")
results <- table$phan.min
write.csv(results, "rmsea.fun.6phan.min.all.paths.csv")
results <- table$phan.max
write.csv(results, "rmsea.fun.6phan.max.all.paths.csv")
results <- table$p.paths
write.csv(results, "rmsea.fun.6p.paths.all.paths.csv")
my.sa$out
table <- sens.tables(my.sa)
results <- table$sens.summary
write.csv(results, "rmsea.fun.6sens.summary.all.paths.csv")
results <- table$phan.paths
write.csv(results, "rmsea.fun.6phan.paths.all.paths.csv")
results <- table$phan.min
write.csv(results, "rmsea.fun.6phan.min.all.paths.csv")
results <- table$phan.max
write.csv(results, "rmsea.fun.6phan.max.all.paths.csv")
results <- table$p.paths
write.csv(results, "rmsea.fun.6p.paths.all.paths.csv")
setwd("D:\\Dropbox\\Sensitivity Analysis for SEM\\Charlie-Hailey-William-Zeyuan\\William\\For grant proposal")
#lower diagonal correlation matrix provided by the authors
lower = '
1.00
.40 1.00
.40 .64 1.00
.41 .66 .61 1.00
.42 .52 .53 .61 1.00
.34 .50 .46 .53 .48 1.00
.42 .47 .41 .43 .47 .55 1.00
.39 .46 .39 .30 .21 .30 .37 1.00
.24 .31 .30 .31 .26 .32 .27 .56 1.00
.33 .35 .35 .40 .31 .25 .35 .51 .42 1.00
.30 .42 .36 .32 .24 .37 .43 .44 .37 .49 1.00'
library(lavaan)
library(SEMsens)
?sem
#convert to full covariance matrix
sample.cov = getCov(lower, sds = c(5.64,14.68,6.57,6.07,3.39,10.16,6.11,4.91,15.59,0.96,0.99),
names = c("Working_memory",
"Vocabulary",
"Grammar",
"Inference",
"ToM",
"TNL",
"Expository",
"Spelling",
"Sentence_copying",
"One_day",
"Castle"))
model <-'Vocabulary~Working_memory
Grammar~Working_memory
Inference~Vocabulary+Grammar+Working_memory
ToM~Vocabulary+Grammar+Working_memory
Spelling~Working_memory
Sentence_copying~Working_memory
Discourse~Inference+ToM+Vocabulary+Grammar+Working_memory
Writing~Spelling+Sentence_copying+Discourse
Discourse=~TNL+Expository
Writing=~One_day+Castle
Vocabulary~~Grammar
Grammar~~Sentence_copying
Vocabulary~~Sentence_copying
Grammar~~Spelling
Vocabulary~~Spelling
Inference~~ToM
Discourse~~Sentence_copying
Discourse~~Spelling
Spelling~~Sentence_copying'
sens.model <- 'Vocabulary~Working_memory
Grammar~Working_memory
Inference~Vocabulary+Grammar+Working_memory
ToM~Vocabulary+Grammar+Working_memory
Spelling~Working_memory
Sentence_copying~Working_memory
Discourse~Inference+ToM+Vocabulary+Grammar+Working_memory
Writing~Spelling+Sentence_copying+Discourse
Discourse=~TNL+Expository
Writing=~One_day+Castle
Vocabulary~~Grammar
Grammar~~Sentence_copying
Vocabulary~~Sentence_copying
Grammar~~Spelling
Vocabulary~~Spelling
Inference~~ToM
Discourse~~Sentence_copying
Discourse~~Spelling
Spelling~~Sentence_copying
Working_memory ~ phantom1*phantom
Grammar ~ phantom2*phantom
Vocabulary ~ phantom3*phantom
ToM ~ phantom4*phantom
Inference ~ phantom5*phantom
Spelling ~ phantom6*phantom
Sentence_copying  ~ phantom7*phantom
Discourse ~ phantom8*phantom
Writing ~ phantom9*phantom
phantom =~ 0 # added for mean of zero
phantom ~~ 1*phantom'
start <- Sys.time()
my.sa <-sa.aco(model = model, sens.model = sens.model, sample.cov = sample.cov,
sample.nobs = 193, n.of.sens.pars = 9, max.value= 2000,
opt.fun = 4, ## to just significant
paths = c(1:18), seed = 100
)
run.time <- Sys.time() - start; run.time
my.sa$out
table <- sens.tables(my.sa)
results <- table$sens.summary
write.csv(results, "p-value.fun.4.sens.summary.all.paths.csv")
results <- table$phan.paths
write.csv(results, "p-value.fun.4.phan.paths.all.paths.csv")
results <- table$phan.min
write.csv(results, "p-value.fun.4.phan.min.all.paths.csv")
results <- table$phan.max
write.csv(results, "p-value.fun.4.phan.max.all.paths.csv")
results <- table$p.paths
write.csv(results, "p-value.fun.4.p.paths.all.paths.csv")
start <- Sys.time()
my.sa <-sa.aco(model = model, sens.model = sens.model, sample.cov = sample.cov,
sample.nobs = 193, n.of.sens.pars = 9, max.value= 2000,
opt.fun = 6, ## to just significant
paths = c(1:18),
seed = 100
)
run.time <- Sys.time() - start; run.time
my.sa$out
table <- sens.tables(my.sa)
results <- table$sens.summary
write.csv(results, "rmsea.fun.6sens.summary.all.paths.csv")
results <- table$phan.paths
write.csv(results, "rmsea.fun.6phan.paths.all.paths.csv")
results <- table$phan.min
write.csv(results, "rmsea.fun.6phan.min.all.paths.csv")
results <- table$phan.max
write.csv(results, "rmsea.fun.6phan.max.all.paths.csv")
results <- table$p.paths
write.csv(results, "rmsea.fun.6p.paths.all.paths.csv")
kim17.fig6.model =
'Vocabulary~Working_memory
Grammar~Working_memory
Inference~Vocabulary+Grammar+Working_memory
ToM~Vocabulary+Grammar+Working_memory
Spelling~Working_memory
Sentence_copying~Working_memory
Discourse~Inference+ToM+Vocabulary+Grammar+Working_memory
Writing~Spelling+Sentence_copying+Discourse
Discourse=~TNL+Expository
Writing=~One_day+Castle
Vocabulary~~Grammar
Grammar~~Sentence_copying
Vocabulary~~Sentence_copying
Grammar~~Spelling
Vocabulary~~Spelling
Inference~~ToM
Discourse~~Sentence_copying
Discourse~~Spelling
Spelling~~Sentence_copying'
fit <- sem(kim17.fig6.model,
sample.cov = sample.cov,
sample.nobs = 193)
summary(fit, standardized = TRUE)
sens.model <- 'Vocabulary~Working_memory
Grammar~Working_memory
Inference~Vocabulary+Grammar+Working_memory
ToM~Vocabulary+Grammar+Working_memory
Spelling~Working_memory
Sentence_copying~Working_memory
Discourse~Inference+ToM+Vocabulary+Grammar+Working_memory
Writing~Spelling+Sentence_copying+Discourse
Discourse=~TNL+Expository
Writing=~One_day+Castle
Vocabulary~~Grammar
Grammar~~Sentence_copying
Vocabulary~~Sentence_copying
Grammar~~Spelling
Vocabulary~~Spelling
Inference~~ToM
Discourse~~Sentence_copying
Discourse~~Spelling
Spelling~~Sentence_copying
Working_memory ~ 0.5*phantom
Grammar ~ 0.5*phantom
Vocabulary ~ 0.5*phantom
ToM ~ 0.5*phantom
Inference ~ 0.5*phantom
Spelling ~ 0.5*phantom
Discourse ~ 0.5*phantom
Writing ~ 0.5*phantom
phantom =~ 0 # added for mean of zero
phantom ~~ 1*phantom'
fit <- sem(sens.model,
sample.cov = sample.cov,
sample.nobs = 193)
summary(fit, standardized = TRUE)
fitMeasures(fit)
lavaanPlot(model=fit,coefs = T, stand=T, stars="regress")
library(lavaanPlot)
lavaanPlot(model=fit,coefs = T, stand=T, stars="regress")
my.sa$out
my.sa$outcome
setwd("D:\\Dropbox\\odr")
usethis::use_readme_rmd()
setwd("D:\\Dropbox\\odr")
devtools::document()
devtools::document()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(odr)
# unconstrained optimal design
myod1 <- od.2(icc = 0.2, r12 = 0.5, r22 = 0.5, c1 = 1, c2 = 5, c1t = 1, c2t = 50,
varlim = c(0.01, 0.02))
# constrained optimal design with n = 20
myod2 <- od.2(icc = 0.2, r12 = 0.5, r22 = 0.5, c1 = 1, c2 = 5, c1t = 1, c2t = 50,
plot.by = list(p = "p"), n = 20, varlim = c(0.005, 0.030))
# relative efficiency
myre <- re(od = myod1, subod = myod2) # Functions rpe and re are same
# required budget calculation
mym <- power.2(expr = myod1, d = 0.3, q = 1, power = 0.8)
# See https://cran.r-project.org/web/packages/odr/vignettes/odr.html for more examples
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "NEWS-"
)
