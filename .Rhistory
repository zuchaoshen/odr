# MDES calculation
mymdes1 <- power.2m(expr = myod1, J = 22.8,
power = 0.8, q = 1)
mymdes1$out  # d = 0.20
# Unconstrained optimal design #---------
myod1 <- od.2m(icc = 0.2, omega = 0.02, r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
varlim = c(0, 0.005))
myod1$out # n = 23.5, p = 0.24
# ------- Power analyses by default considering costs and budget -------
# Required budget and sample size
mym.1 <- power.2m(expr = myod1, d = 0.2, q = 1, power = 0.8)
mym.1$out  # m = 1882, J = 22.8
# mym.1$par  # parameters and their values used for the function
# Or, equivalently, specify every argument in the function
mym.1 <- power.2m(d = 0.2, power = 0.8, q = 1,
icc = 0.2, omega = 0.02, r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
n = 23.5, p = 0.24)
# Required budget and sample size with constrained p
mym.2 <- power.2m(expr = myod1, d = 0.2, q = 1, power = 0.8,
constraint = list(p = 0.5))
mym.2$out  # m = 2424, J = 18
# Required budget and sample size with constrained p and n
mym.3 <- power.2m(expr = myod1, d = 0.2, q = 1, power = 0.8,
constraint = list(p = 0.5, n = 5))
mym.3$out  # m = 2502, J = 66.7
# Power calculation
mypower <- power.2m(expr = myod1, q = 1, d = 0.2, m = 1882)
mypower$out  # power = 0.80
# Power calculation under constrained p (p = 0.5)
mypower.1 <- power.2m(expr = myod1, q = 1, d = 0.2, m = 1882,
constraint = list(p = 0.5))
mypower.1$out  # power = 0.68
# MDES calculation
mymdes <- power.2m(expr = myod1, q = 1, power = 0.80, m = 1882)
mymdes$out  # d = 0.20
# ------- Conventional power analyses with cost.model = FALSE-------
# Required sample size
myJ <- power.2m(cost.model = FALSE, expr = myod1, d = 0.2,
q = 1, power = 0.8)
myJ$out  # J = 22.8
# myL$par  # parameters and their values used for the function
# Or, equivalently, specify every argument in the function
myJ <- power.2m(cost.model = FALSE, d = 0.2, power = 0.8, q = 1,
icc = 0.2, omega = 0.02, r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
n = 23.5, p = 0.24)
myJ
myJ$out
# Power calculation
mypower1 <- power.2m(expr = myod1, J = 22.8,
d = 0.2, q = 1)
mypower1$out  # power = 0.80
# MDES calculation
mymdes1 <- power.2m(expr = myod1, J = 22.8,
power = 0.8, q = 1)
mymdes1$out  # d = 0.20
# MDES calculation
mymdes1 <- power.2m(cost.model = FALSE, expr = myod1, J = 22.8,
power = 0.8, q = 1)
# Unconstrained optimal design #---------
myod1 <- od.2m(icc = 0.2, omega = 0.02, r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
varlim = c(0, 0.005))
myod1$out # n = 23.5, p = 0.24
# ------- Power analyses by default considering costs and budget -------
# Required budget and sample size
mym.1 <- power.2m(expr = myod1, d = 0.2, q = 1, power = 0.8)
mym.1$out  # m = 1882, J = 22.8
# mym.1$par  # parameters and their values used for the function
# Or, equivalently, specify every argument in the function
mym.1 <- power.2m(d = 0.2, power = 0.8, q = 1,
icc = 0.2, omega = 0.02, r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
n = 23.5, p = 0.24)
# Required budget and sample size with constrained p
mym.2 <- power.2m(expr = myod1, d = 0.2, q = 1, power = 0.8,
constraint = list(p = 0.5))
mym.2$out  # m = 2424, J = 18
# Required budget and sample size with constrained p and n
mym.3 <- power.2m(expr = myod1, d = 0.2, q = 1, power = 0.8,
constraint = list(p = 0.5, n = 5))
mym.3$out  # m = 2502, J = 66.7
# Power calculation
mypower <- power.2m(expr = myod1, q = 1, d = 0.2, m = 1882)
mypower$out  # power = 0.80
# Power calculation under constrained p (p = 0.5)
mypower.1 <- power.2m(expr = myod1, q = 1, d = 0.2, m = 1882,
constraint = list(p = 0.5))
mypower.1$out  # power = 0.68
# MDES calculation
mymdes <- power.2m(expr = myod1, q = 1, power = 0.80, m = 1882)
mymdes$out  # d = 0.20
# ------- Conventional power analyses with cost.model = FALSE-------
# Required sample size
myJ <- power.2m(cost.model = FALSE, expr = myod1, d = 0.2,
q = 1, power = 0.8)
myJ$out  # J = 22.8
# myL$par  # parameters and their values used for the function
# Or, equivalently, specify every argument in the function
myJ <- power.2m(cost.model = FALSE, d = 0.2, power = 0.8, q = 1,
icc = 0.2, omega = 0.02, r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
n = 23.5, p = 0.24)
myJ$out
# Power calculation
mypower1 <- power.2m(expr = myod1, J = 22.8,
d = 0.2, q = 1)
mypower1$out  # power = 0.80
# MDES calculation
mymdes1 <- power.2m(cost.model = FALSE, expr = myod1, J = 22.8,
power = 0.8, q = 1)
mymdes1$out  # d = 0.20
# Power calculation
mypower1 <- power.2m(expr = myod1, J = 22.8,
d = 0.2, q = 1)
mypower1$out  # power = 0.80
myod1
# Unconstrained optimal design #---------
myod1 <- od.2m(icc = 0.2, omega = 0.02, r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
varlim = c(0, 0.005))
myod1$out # n = 23.5, p = 0.24
# ------- Power analyses by default considering costs and budget -------
# Required budget and sample size
mym.1 <- power.2m(expr = myod1, d = 0.2, q = 1, power = 0.8)
mym.1$out  # m = 1882, J = 22.8
# mym.1$par  # parameters and their values used for the function
# Or, equivalently, specify every argument in the function
mym.1 <- power.2m(d = 0.2, power = 0.8, q = 1,
icc = 0.2, omega = 0.02, r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
n = 23.5, p = 0.24)
# Required budget and sample size with constrained p
mym.2 <- power.2m(expr = myod1, d = 0.2, q = 1, power = 0.8,
constraint = list(p = 0.5))
mym.2$out  # m = 2424, J = 18
# Required budget and sample size with constrained p and n
mym.3 <- power.2m(expr = myod1, d = 0.2, q = 1, power = 0.8,
constraint = list(p = 0.5, n = 5))
mym.3$out  # m = 2502, J = 66.7
# Power calculation
mypower <- power.2m(expr = myod1, q = 1, d = 0.2, m = 1882)
mypower$out  # power = 0.80
# Power calculation under constrained p (p = 0.5)
mypower.1 <- power.2m(expr = myod1, q = 1, d = 0.2, m = 1882,
constraint = list(p = 0.5))
mypower.1$out  # power = 0.68
# MDES calculation
mymdes <- power.2m(expr = myod1, q = 1, power = 0.80, m = 1882)
mymdes$out  # d = 0.20
# ------- Conventional power analyses with cost.model = FALSE-------
# Required sample size
myJ <- power.2m(cost.model = FALSE, expr = myod1, d = 0.2,
q = 1, power = 0.8)
myJ$out  # J = 22.8
# myL$par  # parameters and their values used for the function
# Or, equivalently, specify every argument in the function
myJ <- power.2m(cost.model = FALSE, d = 0.2, power = 0.8, q = 1,
icc = 0.2, omega = 0.02, r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
n = 23.5, p = 0.24)
myJ$out
# Power calculation
mypower1 <- power.2m(expr = myod1, J = 22.8,
d = 0.2, q = 1)
mypower1$out  # power = 0.80
# Power calculation
mypower1 <- power.2m(cost.model = FALSE, expr = myod1, J = 22.8,
d = 0.2, q = 1)
mypower1$out  # power = 0.80
# MDES calculation
mymdes1 <- power.2m(cost.model = FALSE, expr = myod1, J = 22.8,
power = 0.8, q = 1)
mymdes1$out  # d = 0.20
?power.2m
# Power calculation
mypower <- power.2m(expr = myod1, q = 1, d = 0.2, m = 1882)
mypower$out  # power = 0.80
# Power calculation under constrained p (p = 0.5)
mypower.1 <- power.2m(expr = myod1, q = 1, d = 0.2, m = 1882,
constraint = list(p = 0.5))
mypower.1$out  # power = 0.68
# MDES calculation
mymdes <- power.2m(expr = myod1, q = 1, power = 0.80, m = 1882)
mymdes$out  # d = 0.20
?power.2m
# Unconstrained optimal design #---------
myod1 <- od.2m(icc = 0.2, omega = 0.02, r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
varlim = c(0, 0.005))
myod1$out # n = 23.5, p = 0.24
# ------- Power analyses by default considering costs and budget -------
# Required budget and sample size
mym.1 <- power.2m(expr = myod1, d = 0.2, q = 1, power = 0.8)
mym.1$out  # m = 1882, J = 22.8
# mym.1$par  # parameters and their values used for the function
# Or, equivalently, specify every argument in the function
mym.1 <- power.2m(d = 0.2, power = 0.8, q = 1,
icc = 0.2, omega = 0.02, r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
n = 23.5, p = 0.24)
# Required budget and sample size with constrained p
mym.2 <- power.2m(expr = myod1, d = 0.2, q = 1, power = 0.8,
constraint = list(p = 0.5))
mym.2$out  # m = 2424, J = 18
# Required budget and sample size with constrained p and n
mym.3 <- power.2m(expr = myod1, d = 0.2, q = 1, power = 0.8,
constraint = list(p = 0.5, n = 5))
mym.3$out  # m = 2502, J = 66.7
# Power calculation
mypower <- power.2m(expr = myod1, q = 1, d = 0.2, m = 1882)
mypower$out  # power = 0.80
# Power calculation under constrained p (p = 0.5)
mypower.1 <- power.2m(expr = myod1, q = 1, d = 0.2, m = 1882,
constraint = list(p = 0.5))
mypower.1$out  # power = 0.68
# MDES calculation
mymdes <- power.2m(expr = myod1, q = 1, power = 0.80, m = 1882)
mymdes$out  # d = 0.20
# ------- Conventional power analyses with cost.model = FALSE-------
# Required sample size
myJ <- power.2m(cost.model = FALSE, expr = myod1, d = 0.2,
q = 1, power = 0.8)
myJ$out  # J = 22.8
# myL$par  # parameters and their values used for the function
# Or, equivalently, specify every argument in the function
myJ <- power.2m(cost.model = FALSE, d = 0.2, power = 0.8, q = 1,
icc = 0.2, omega = 0.02, r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
n = 23.5, p = 0.24)
# Power calculation
mypower1 <- power.2m(cost.model = FALSE, expr = myod1, J = 22.8,
d = 0.2, q = 1)
mypower1$out  # power = 0.80
# MDES calculation
mymdes1 <- power.2m(cost.model = FALSE, expr = myod1, J = 22.8,
power = 0.8, q = 1)
mymdes1$out  # d = 0.20
expr$par$omega
myod <- od.2m.only.mod(icc = .2, r12 = .5, r22m = .5,
c1 = 10, c1t = 100, c2 = 50, omega = .01)
mypower <- power.2m.mod(expr = myod, m=myod$out$m, gamma = 0.1); mypower$out
myod$out$m
mypower <- power.2m.mod(expr = myod, m=100000, gamma = 0.1); mypower$out
myod <- od.2m.only.mod(icc = .2, r12 = .5, r22m = .5,
c1 = 10, c1t = 100, c2 = 50, omega = .01)
mypower <- power.2m.mod(expr = myod, m=1000, gamma = 0.1); mypower$out
myod <- od.2m.only.mod(icc = .2, r12 = .5, r22m = .5,
c1 = 10, c1t = 100, c2 = 50, omega = .01)
mypower <- power.2m.mod(expr = myod, m=1000, gamma = 0.1); mypower$out
myod <- od.2m.only.mod(icc = .2, r12 = .5, r22m = .5,
c1 = 10, c1t = 100, c2 = 50, omega = .01)
mypower <- power.2m.mod(expr = myod, m=1000, gamma = 0.1); mypower$out
myod <- od.2m.only.mod(icc = .2, r12 = .5, r22m = .5,
c1 = 10, c1t = 100, c2 = 50, omega = .01)
mypower <- power.2m.mod(expr = myod, m=10000, gamma = 0.1); mypower$out
myod <- od.2m.only.mod(icc = .2, r12 = .5, r22m = .5,
c1 = 10, c1t = 100, c2 = 50, omega = .01)
mypower <- power.2m.mod(expr = myod, m=10000, gamma = 0.1); mypower$out
myod <- od.2m.only.mod(icc = .2, r12 = .5, r22m = .5,
c1 = 10, c1t = 100, c2 = 50, omega = .01)
mypower <- power.2m.mod(expr = myod, m=100000, gamma = 0.1); mypower$out
myod <- od.2m.only.mod(icc = .2, r12 = .5, r22m = .5,
c1 = 10, c1t = 100, c2 = 50, omega = .01)
mypower <- power.2m.mod(expr = myod, m=100000, gamma = 0.1); mypower$out
myod <- od.2m.only.mod(icc = .2, r12 = .5, r22m = .5,
c1 = 10, c1t = 100, c2 = 50, omega = .01)
mypower <- power.2m.mod(expr = myod, m=100000, gamma = 0.1); mypower$out
mypower <- power.2m.mod(expr = myod, power.mod = .8, gamma = 0.1); mypower$out
mypower <- power.2m.mod(expr = myod, power.mod = .8, gamma = 0.1,
mlim = c(10000, 1e10)); mypower$out
myod <- od.2m.only.mod(icc = .2, r12 = .5, r22m = .5,
c1 = 10, c1t = 100, c2 = 50, omega = .01)
mypower <- power.2m.mod(expr = myod, power.mod = .8, gamma = 0.1); mypower$out
library(devtools)
library(rhub)
library(revdepcheck)
install.packages("revdepcheck")
devtools::spell_check() # spell check
# Rhub check set up and then check (needs git)
rhub_setup()
library(odr)
# 1. Main effect----
main <- od.2m(icc = .15, r12 = .6, r22m = .4, d = 0.20,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
Jlim = c(2.5, 1e+10))
main$out# n = 25; p = .21; J = 20
n = 25; p = .21; c1 = 10; c1t = 150; c2 = 200; J = 20;
m = J*((1 - p) * c1 * n +  p * c1t * n + c2);m
power.2m(expr = main, power = .80, d = .20)
power.2m(expr = main, power = .80, m = m)
# 2. Moderation effects only----
## A binary moderator at level 2====
od.2m.only.mod(icc = .15, r12 = .6, r22m = .4, Q = .50,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01)
n = 85; p = .21; c1 = 10; c1t = 150; c2 = 200; J = 30;
m = J*((1 - p) * c1 * n +  p * c1t * n + c2);m
od.2m.only.mod(icc = .15, r12 = .6, r22m = .4, Q = .50,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
by = "n", m = m, varlim = c(0, 0.01))
od.2m.only.mod(icc = .15, r12 = .6, r22m = .4, Q = .50,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
by = "p", m = m,varlim = c(0, 0.01))
## A binary moderator at level 1 ====
od.2m.only.mod(icc = .15, r12 = .6, r22m = .4, Q = .50,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
mod.level = 1, n = 200)
n = 200; p = .21; c1 = 10; c1t = 150; c2 = 200; J = 30;
m = J*((1 - p) * c1 * n +  p * c1t * n + c2);m
od.2m.only.mod(icc = .15, r12 = .6, r22m = .4, Q = .50,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
mod.level = 1, n = 200,
by = "n", m = m)
od.2m.only.mod(icc = .15, r12 = .6, r22m = .4, Q = .50,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
mod.level = 1, n = 200,
by = "p", m = m)
od.2m.only.mod(icc = .15, r12 = .6, r22m = .4, Q = .50,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
mod.level = 1, n = 60)
# p = .23
od.2m.only.mod(icc = .15, r12 = .6, r22m = .4, Q = .50,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
mod.level = 1, n = 20)
# 3. Jointly optimal allocation----
## A binary moderator at level 2 ====
myod <- od.2m.mod(icc = .15, r12 = .6, r22m = .4, d = 0.20,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
gamma = 0.25,
mod.level = 2)
myod$out
plot.power(myod)
n = 43; p = .21; c1 = 10; c1t = 150; c2 = 200; J = 27;
m = J*((1 - p) * c1 * n +  p * c1t * n + c2);m
plot.power(myod)
plot.power(myod, by = "n", legend = F, m =m)
plot.power(myod, by = "p", legend = F, m =m)
# A balanced design with p = .5 and n = 43
myod <- od.2m.mod(icc = .15, r12 = .6, r22m = .4, d = 0.20,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
gamma = 0.25,
mod.level = 2, p = .5, n = 43)
myod$out
plot.power(myod)
power.2m.mod(expr = myod, m = 51143, gamma = .25)
# power.mod = .66 for moderation
power.2m(expr = myod, m = 51143, d = .20)
power.2m.mod(expr = myod, power.mod = .8, gamma = .25)$out$m/m
# change the main effect to 0.10
myod <- od.2m.mod(icc = .15, r12 = .6, r22m = .4, d = 0.10,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
gamma = 0.25,
mod.level = 2)
myod$out
plot.power(myod)
n = 35; p = .21; c1 = 10; c1t = 150; c2 = 200; J = 53;
m = J*((1 - p) * c1 * n +  p * c1t * n + c2);m
plot.power(myod, by = "n", legend = F, m = m)
plot.power(myod, by = "p", legend = F, m = m)
## A binary moderator at level 1 ====
myod <- od.2m.mod(icc = .15, r12 = .6, r22m = .4, d= 0.20,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
gamma = 0.1,
mod.level = 1,
max.iter = 1000)
myod$out # n = 1488, p = .21, m = 254430
plot.power(myod)
plot.power(myod, by = "p", legend = F)
plot.power(myod, by = "n", legend = F, nlim = c(5, 2000))
# A balanced design with p = .5 and n = 20
myod <- od.2m.mod(icc = .15, r12 = .6, r22m = .4, d= 0.20,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
gamma = 0.1,
mod.level = 1,
max.iter = 1000,
n = 20, p = .50)
myod$out$m/254430
# 51% more budget
power.2m.mod(expr = myod, m = 254430,  gamma = .1)$out
power.2m(expr = myod, m = 254430, d = .20)$out
# change main effect to 0.10
myod <- od.2m.mod(icc = .15, r12 = .6, r22m = .4, d= 0.10,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
gamma = 0.1,
mod.level = 1,
max.iter = 1000)
myod$out
plot.power(myod)
plot.power(myod, by = "p", legend = F)
plot.power(myod, by = "n", legend = F, nlim = c(5, 2000))
myod <- od.2m.mod(icc = .15, r12 = .6, r22m = .4, d= 0.20,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
gamma = 0.1,
mod.level = 1,
n = 200,max.iter = 1000)
myod$out
n = 200; p = .21; c1 = 10; c1t = 150; c2 = 200; J = 32;
m = J*((1 - p) * c1 * n +  p * c1t * n + c2);m
plot.power(myod, m = m)
plot.power(myod, by = "n", legend = F, m = m)
plot.power(myod, by = "p", legend = F, m = m)
?od.2m
# Unconstrained optimal design #---------
myod1 <- od.2m(icc = 0.2, omega = 0.02, r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
varlim = c(0, 0.005))
myod1$out
# Constrained optimal design with p = 0.5 #---------
myod2 <- od.2m(icc = 0.2, omega = 0.02,
r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
varlim = c(0, 0.005), p = 0.5)
myod2$out
# Relative efficiency (RE)
myre <- re(od = myod1, subod= myod2)
myre$re # RE = 0.81
# Constrained optimal design with n = 5 #---------
myod3 <- od.2m(icc = 0.2, omega = 0.02,
r12 = 0.5, r22m = 0.5, c1 = 1, c2 = 10,
c1t = 10, varlim = c(0, 0.005), n = 5)
myod3$out
# Relative efficiency (RE)
myre <- re(od = myod1, subod= myod3)
myre$re # RE = 0.78
# Constrained n and p, no calculation performed #---------
myod4 <- od.2m(icc = 0.2, omega = 0.02, r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
varlim = c(0, 0.005), p = 0.5, n = 10)
myod4$out
# Relative efficiency (RE)
myre <- re(od = myod1, subod= myod4)
myre$re # RE = 0.79
# Unconstrained optimal design #---------
myod1 <- od.2m(icc = 0.2, omega = 0.02, r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
varlim = c(0, 0.005), )
myod1$out
# Unconstrained optimal design #---------
myod1 <- od.2m(icc = 0.2, omega = 0.02, r12 = 0.5, r22m = 0.5,
c1 = 1, c2 = 10, c1t = 10,
varlim = c(0, 0.005), aco = FALSE)
myod1$out
library(odr)
# 1. Main effect----
main <- od.2m(icc = .15, r12 = .6, r22m = .4, d = 0.20,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
Jlim = c(2.5, 1e+10))
main$out# n = 25; p = .21; J = 20
main <- od.2m(icc = .15, r12 = .6, r22m = .4, d = 0.20,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
aco = FALSE)
main <- od.2m(icc = .15, r12 = .6, r22m = .4, d = 0.20,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
aco = FALSE,varlim = c(0, 0.01))
main <- od.2m(icc = .15, r12 = .6, r22m = .4, d = 0.20,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
Jlim = c(2.5, 1e+10))
# 1. Main effect----
main <- od.2m(icc = .15, r12 = .6, r22m = .4, d = 0.20,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
Jlim = c(2.5, 1e+10), verbose = F)
main$out# n = 25; p = .21; J = 20
n = 25; p = .21; c1 = 10; c1t = 150; c2 = 200; J = 20;
m = J*((1 - p) * c1 * n +  p * c1t * n + c2);m
power.2m(expr = main, power = .80, d = .20)
power.2m(expr = main, power = .80, m = m)
plot.power(main)
library(odr)
# 1. Main effect----
main <- od.2m(icc = .15, r12 = .6, r22m = .4, d = 0.20,
c1 = 10, c1t = 150, c2 = 200, omega = 0.01,
Jlim = c(2.5, 1e+10), verbose = F)
plot.power(main)
plot.power(expr=main)
plot.power(expr=main)
plot.power(expr = main)
warnings()
m
devtools::spell_check() # spell check
# Rhub check set up and then check (needs git)
rhub_setup()
library(devtools)
library(rhub)
library(revdepcheck)
library(devtools)
library(rhub)
library(revdepcheck)
install.packages("revdepcheck")
library(revdepcheck)
devtools::spell_check() # spell check
# Rhub check set up and then check (needs git)
rhub_setup()
rhub::rhub_doctor()
rhub::rhub_check() # rhub check # Note. It did not work for bad credentials
devtools::check_win_devel() # check on win-builder (with `check_win_devel()`)?
# Put your PAT into the local Git credential store
gitcreds::gitcreds_set()
library(devtools)
library(rhub)
library(revdepcheck)
# Rhub check set up and then check (needs git)
rhub_setup()
revdep_check()
library(devtools)
library(rhub)
library(revdepcheck)
# Rhub check set up and then check (needs git)
rhub_setup()
# Put your PAT into the local Git credential store
gitcreds::gitcreds_set()
